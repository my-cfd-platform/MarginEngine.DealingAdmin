@page "/Defaults"

@using DealingAdmin.Abstractions.Providers.Interfaces
@using DealingAdmin.Shared.Services
@using Serilog.Core
@using SimpleTrading.Abstraction.Markups
@using SimpleTrading.Common.Abstractions.DefaultValues
@using SimpleTrading.QuotesFeedRouter.Abstractions
@using SimpleTrading.Common.Abstractions.Images
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Abstractions.Extensions
@using SimpleTrading.Abstraction.Trading.Instruments
@using System.Xml.Linq
@using DealingAdmin.Abstractions.Providers.Models
@using DealingAdmin.Shared.Models

@inject IAvailableLiquidityProviders AvailableLiquidityProviders
@inject IMarkupProfilesRepository MarkupProfilesRepository
@inject StateManager AppState
@inject LiveDemoServiceMapper LiveDemoServices;
@inject IDefaultLiquidityProviderWriter DefLiquidityProviderWriter
@inject IDefaultMarkupProfileWriter DefMarkupProfileWriter 
@inject IDefaultValuesRepository DefValuesRepository
@inject IDefaultValuesService DefValuesService;
@inject IRepository<IDefaultFavoriteInstruments> DefFavInstruments;
@inject ICache<ITradingInstrument> InstrumentsCache
@inject ISnackbar Snackbar
@inject Logger Logger

<Tabs Size="@TabSize.Large">
    <TabPane Tab="LIQUIDITY PROVIDER" Key="LiquidityProvider" Class="tab-text"> 
        <Card Title="Default Liquidity Provider" Class="my-2" Style="width: 300px;">
            <Body>
                <Select DataSource="@_liquidityProviders"
                    @bind-Value="@_selectedLiquidityProvider"
	                TItemValue="string"
	                TItem="string">
                </Select>
                <AntDesign.Row Class="center-middle mt-5">
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button
                            Class="btn-text bg-color-aquamarine" 
                            OnClick="SaveDefaultLp"
                            Disabled="@(_selectedLiquidityProvider.IsNullOrEmpty())">Save</AntDesign.Button>
                    </Col>
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="ResetDefaultLp">Reset</AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </Body>
        </Card>
	</TabPane>
    <TabPane Tab="MARKUP PROFILE" Key="MarkupProfile" Class="tab-text">
        <Card Title="Default Markup Profile" Class="my-2" Style="width: 300px;">
            <Body>
            <Select DataSource="@_markupProfiles"
                    @bind-Value="@_selectedMarkupProfile"
                    TItemValue="string"
                    TItem="string">
            </Select>
            <AntDesign.Row Class="center-middle mt-5">
                <Col Span="12" Class="center-middle">
                    <AntDesign.Button 
                        Class="btn-text bg-color-aquamarine"
                        OnClick="SaveDefaultMarkup" 
                        Disabled="@(_selectedMarkupProfile.IsNullOrEmpty())">Save</AntDesign.Button>
                </Col>
                <Col Span="12" Class="center-middle">
                    <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="ResetDefaultMarkup">Reset</AntDesign.Button>
                </Col>
            </AntDesign.Row>
            </Body>
        </Card>
    </TabPane>
    <TabPane Tab="TRADING GROUP" Key="TradingGroup" Class="tab-text">
        <Card Title="Default Trading Group" Class="my-2" Style="width: 300px;">
            <Body>
            <Select DataSource="@_tradingGroups"
                    @bind-Value="@_selectedTradingGroup"
                    TItemValue="string"
                    TItem="string">
            </Select>
            <AntDesign.Row Class="center-middle mt-5">
                <Col Span="12" Class="center-middle">
                    <AntDesign.Button 
                        Class="btn-text bg-color-aquamarine"
                        OnClick="SaveDefaultTradingGroupAsync" 
                        Disabled="@(string.IsNullOrEmpty(_selectedTradingGroup))">Save</AntDesign.Button>
                </Col>
                <Col Span="12" Class="center-middle">
                    <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="ResetTradingGroupAsync">Reset</AntDesign.Button>
                </Col>
            </AntDesign.Row>
            </Body>
        </Card>
    </TabPane>
    <TabPane Tab="INSTRUMENT FAVOURITES" Key="InstrumentFavourites" Class="tab-text">
        <Card Title="Default Web Instrument Favourites" Class="my-2" Style="width: 600px;">
            <Body>
            <AntDesign.Button
                Class="btn-text bg-color-aquamarine"
                OnClick="SaveDefaultWebFavs"
                Disabled="WebFavouritesChangesAvailable()">Save</AntDesign.Button>
            <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="RefreshDefaultFavouritesAsync">Reset</AntDesign.Button>
            <Divider Orientation="left"></Divider>
            <GridRow Gutter="16">
                <GridCol Span="9">
                    <Divider Orientation="left">Selected Instruments</Divider>
                    <Table DataSource="@_webFavourites"
                           TItem="ExtendedViewListItem"
                           ScrollY="220px"
                           Style="min-height: 220px; height: 220px"
                           HidePagination="true">
                        <ColumnDefinitions>
                            <ColumnDefinition Title="Selected"
                                              Width="48"/>
                            <ColumnDefinition Title=""
                                              Width="12"
                                              Fixed="right"/>
                        </ColumnDefinitions>
                        <RowTemplate>
                            <TableRow>
                                <TableCell Align="ColumnAlign.Center">
                                    <Tag PresetColor="context.Data.IsNew ? PresetColor.Orange : PresetColor.Lime">
                                        @context.Data.Value
                                    </Tag>
                                </TableCell>
                                <TableCell Align="ColumnAlign.Center">
                                    <a  @onclick="() => WebDisable(context.Data)">
                                        <i class="material-icons color-crimson mx-1">arrow_right</i>
                                    </a>
                                </TableCell>
                            </TableRow>
                        </RowTemplate>
                    </Table>
                </GridCol>
                <GridCol Span="8">
                    <Divider Orientation="left">Available Instruments</Divider>
                    <Table DataSource="@_availableWebInstruments"
                           TItem="ExtendedViewListItem"
                           ScrollY="220px"
                           Style="min-height: 220px; height: 220px"
                           HidePagination="true">
                        <ColumnDefinitions>
                            <ColumnDefinition Title=""
                                              Width="12"
                                              Fixed="left"/>
                            <ColumnDefinition Title="Available"
                                              Width="52"/>
                        </ColumnDefinitions>
                        <RowTemplate>
                            <TableRow>
                                <TableCell Align="ColumnAlign.Center">
                                    <a @onclick="() => WebEnable(context.Data)">
                                        <i class="material-icons color-crimson mx-1">arrow_left</i>
                                    </a>
                                </TableCell>
                                <TableCell Align="ColumnAlign.Center">
                                    <Tag PresetColor="context.Data.IsNew ? PresetColor.Red : PresetColor.Lime">
                                        @context.Data.Value
                                    </Tag>
                                </TableCell>
                            </TableRow>
                        </RowTemplate>
                    </Table>
                </GridCol>
            </GridRow>


            </Body>
        </Card>
        <Card Title="Default Mobile Instrument Favourites" Class="my-2" Style="width: 600px;">
            <Body>
            <AntDesign.Button
                Class="btn-text bg-color-aquamarine"
                OnClick="SaveDefaultMobileFavs"
                Disabled="MobileFavouritesChangesAvailable()">Save</AntDesign.Button>
            <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="RefreshDefaultFavouritesAsync">Reset</AntDesign.Button>
            <Divider Orientation="left"></Divider>
            <GridRow Gutter="16">
                <GridCol Span="9">
                    <Divider Orientation="left">Selected Instruments</Divider>
                    <Table DataSource="@_mobileFavourites"
                           TItem="ExtendedViewListItem"
                           ScrollY="220px"
                           Style="min-height: 220px; height: 220px"
                           HidePagination="true">
                        <ColumnDefinitions>
                            <ColumnDefinition Title="Selected"
                                              Width="48"/>
                            <ColumnDefinition Title=""
                                              Width="12"
                                              Fixed="right"/>
                        </ColumnDefinitions>
                        <RowTemplate>
                            <TableRow>
                                <TableCell Align="ColumnAlign.Center">
                                    <Tag PresetColor="context.Data.IsNew ? PresetColor.Orange : PresetColor.Lime">
                                            @context.Data.Value
                                    </Tag>
                                </TableCell>
                                <TableCell Align="ColumnAlign.Center">
                                    <a  @onclick="() => MobileDisable(context.Data)">
                                        <i class="material-icons color-crimson mx-1">arrow_right</i>
                                    </a>
                                </TableCell>
                            </TableRow>
                        </RowTemplate>
                    </Table>
                </GridCol>
                <GridCol Span="8">
                    <Divider Orientation="left">Available Instruments</Divider>
                    <Table DataSource="@_availableMobileInstruments"
                           TItem="ExtendedViewListItem"
                           ScrollY="220px"
                           Style="min-height: 220px; height: 220px"
                           HidePagination="true">
                        <ColumnDefinitions>
                            <ColumnDefinition Title=""
                                              Width="12"
                                              Fixed="left"/>
                            <ColumnDefinition Title="Available"
                                              Width="52"/>
                        </ColumnDefinitions>
                        <RowTemplate>
                            <TableRow>
                                <TableCell Align="ColumnAlign.Center">
                                    <a @onclick="() => MobileEnable(context.Data)">
                                        <i class="material-icons color-crimson mx-1">arrow_left</i>
                                    </a>
                                </TableCell>
                                <TableCell Align="ColumnAlign.Center">
                                    <Tag PresetColor="context.Data.IsNew ? PresetColor.Red : PresetColor.Lime">
                                            @context.Data.Value
                                    </Tag>
                                </TableCell>
                            </TableRow>
                        </RowTemplate>
                    </Table>
                </GridCol>
            </GridRow>


            </Body>
        </Card>
    </TabPane>
    <TabPane Tab="INSTRUMENT AVATAR" Key="InstrumentAvatar" Class="tab-text">
        <Card Title="Default Instrument Avatar" Class="my-2" Style="width: 600px;">
            <Body>
                <CardGrid Style="width:50%;text-align:center">
                    <div>Default SVG Avatar:</div>
                    <Image Width="150px" Src="@_defaultAvatarSvgSrc" PreviewVisible="@false" />
                </CardGrid>
                <CardGrid Style="width:50%;text-align:center">
                    <div>Default PNG Avatar:</div>
                    <Image Width="150px" Src="@_defaultAvatarPngSrc" PreviewVisible="@false" />
                </CardGrid>
                <CardGrid Style="width:100%;" Class="my-3">
                    <AntDesign.Row>
                        <Col Span="18">
                            <div>Pick an image (svg/png) for new default avatar:</div>
                            <InputFile AdditionalAttributes=@_imageAcceptFilterDict OnChange="@ImageFileChanged"/>
                        </Col>
                        <Col Span="6">
                            <AntDesign.Button Icon="upload"
                                Type="primary"
                                Class="btn-text"
                                OnClick="@UploadAvatarImage"
                                Disabled="@(_imageFile == null)">
                                    <span>Upload</span>
                            </AntDesign.Button>
                        </Col>
                    </AntDesign.Row>
                </CardGrid>
            </Body>
        </Card>
    </TabPane>
</Tabs>

@code {
    private IEnumerable<string> _liquidityProviders;
    private IEnumerable<string> _tradingGroups;
    private IEnumerable<string> _markupProfiles;
    private List<ExtendedViewListItem> _webFavourites;
    private List<ExtendedViewListItem> _availableWebInstruments;
    private List<ExtendedViewListItem> _mobileFavourites;
    private List<ExtendedViewListItem> _availableMobileInstruments;
    private List<string> _instruments;

    string _selectedLiquidityProvider;
    string _selectedTradingGroup;
    string _selectedMarkupProfile;
    string _defaultAvatarSvgSrc;
    string _defaultAvatarPngSrc;
    IBrowserFile _imageFile;

    private readonly Dictionary<string, object> _imageAcceptFilterDict = new ()
    {
         { "accept", "image/png, image/svg+xml" }
    };

    protected override async Task OnInitializedAsync()
    {
        _liquidityProviders = AvailableLiquidityProviders.GetLiquidityProviders();
        _markupProfiles = (await MarkupProfilesRepository.GetAllAsync()).Select(x => x.ProfileId);
        _markupProfiles = (await MarkupProfilesRepository.GetAllAsync()).Select(x => x.ProfileId);
        _selectedLiquidityProvider = await DefLiquidityProviderWriter.GetAsync();
        _selectedMarkupProfile = await DefMarkupProfileWriter.GetAsync();

        _tradingGroups = (await LiveDemoServices.GetContext(AppState.IsLive)
            .TradingGroupsRepository.GetAllAsync()).Select(TradingGroupModel.Create).Select(tg=>tg.Id).ToList();
        _selectedTradingGroup = await GetDefaultTradingGroupValueAsync();

        await RefreshDefaultFavouritesAsync();

        var avatarSvg = await DefValuesRepository.GetTradingInstrumentAvatarSvgAsync();
        var avatarPng = await DefValuesRepository.GetTradingInstrumentAvatarPngAsync();
        _defaultAvatarSvgSrc = $"{FormatUtils.ImageSvgDataPrefix}{avatarSvg}";
        _defaultAvatarPngSrc = $"{FormatUtils.ImagePngDataPrefix}{avatarPng}";

        await base.OnInitializedAsync();
    }

    #region Default LP

    private async void SaveDefaultLp()
    {
        try
        {
            await DefLiquidityProviderWriter.SetAsync(_selectedLiquidityProvider);
            Snackbar.Add($"Default LiquidityProvider set to '{_selectedLiquidityProvider}'", Severity.Success);
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async void ResetDefaultLp()
    {
        _selectedLiquidityProvider = await DefLiquidityProviderWriter.GetAsync();
        StateHasChanged();
    }

    #endregion

    #region Default Trading Group

    private string GetValueNameSuffix()
    {
        return AppState.IsLive ? "live" : "demo";
    }

    private async Task<string> GetDefaultTradingGroupValueAsync()
    {
        return await DefValuesService.GetValueAsync("defaulttg", GetValueNameSuffix());
    }

    private async void SaveDefaultTradingGroupAsync()
    {
        await DefValuesService.SetValueAsync("defaulttg", _selectedTradingGroup, GetValueNameSuffix());
        Snackbar.Add($"Default Trading Group is set to '{_selectedTradingGroup}'", Severity.Success);
    }

    private async void ResetTradingGroupAsync()
    {
        _selectedTradingGroup = await GetDefaultTradingGroupValueAsync();
        StateHasChanged();
    }



    #endregion

    #region Default Favorite Instruments


    private async Task RefreshDefaultFavouritesAsync()
    {
        var webFavs =  await DefFavInstruments.GetAsync("web");
        _webFavourites = webFavs?.Instruments.Select(i=>new ExtendedViewListItem{Value = i}).ToList() ?? new List<ExtendedViewListItem>(); ;
        var mobileFavs = await DefFavInstruments.GetAsync("mobile");
        _mobileFavourites = mobileFavs?.Instruments.Select(i => new ExtendedViewListItem { Value = i }).ToList() ?? new List<ExtendedViewListItem>(); ;
        _instruments = InstrumentsCache.GetAll().Select(i=>i.Id).ToList();
        _availableWebInstruments = _instruments.Where(i => !(webFavs!= null && webFavs.Instruments.Contains(i))).Select(i => new ExtendedViewListItem { Value = i }).ToList();
        _availableMobileInstruments = _instruments.Where(i => !(mobileFavs != null && mobileFavs.Instruments.Contains(i))).Select(i => new ExtendedViewListItem { Value = i }).ToList();
    }

    private void WebEnable(ExtendedViewListItem item)
    {
        item.IsNew = !item.IsNew;
        _webFavourites.Insert(0, item);
        _availableWebInstruments.Remove(item);
    }

    private void WebDisable(ExtendedViewListItem item)
    {
        item.IsNew = !item.IsNew;
        _webFavourites.Remove(item);
        _availableWebInstruments.Insert(0, item);
    }

    private async void SaveDefaultWebFavs()
    {
        var item = DefaultFavoriteInstrumentsEntity.CreateWeb(_webFavourites.Select(i => i.Value));
        await DefFavInstruments.UpdateAsync(item);
        _webFavourites.ForEach(i=>i.IsNew = false);
        _availableWebInstruments.ForEach(i => i.IsNew = false);
        StateHasChanged();
    }

    private bool WebFavouritesChangesAvailable()
    {
        if (_webFavourites is null || _availableWebInstruments is null)
        {
            return false;
        }
        return !(_webFavourites.Any(a => a.IsNew) || _availableWebInstruments.Any(a => a.IsNew));
    }

    private bool MobileFavouritesChangesAvailable()
    {
        if (_webFavourites is null || _availableWebInstruments is null)
        {
            return false;
        }
        return !(_webFavourites.Any(a => a.IsNew) || _availableWebInstruments.Any(a => a.IsNew));
    }

    private void MobileEnable(ExtendedViewListItem item)
    {
        item.IsNew = !item.IsNew;
        _mobileFavourites.Insert(0, item);
        _availableMobileInstruments.Remove(item);
    }

    private void MobileDisable(ExtendedViewListItem item)
    {
        item.IsNew = !item.IsNew;
        _mobileFavourites.Remove(item);
        _availableMobileInstruments.Insert(0, item);
    }

    private async void SaveDefaultMobileFavs()
    {
        var item = DefaultFavoriteInstrumentsEntity.CreateMobile(_mobileFavourites.Select(i => i.Value));
        await DefFavInstruments.UpdateAsync(item);
        _mobileFavourites.ForEach(i => i.IsNew = false);
        _availableMobileInstruments.ForEach(i => i.IsNew = false);
        StateHasChanged();
    }

    #endregion

    #region Default Markup

    private async void SaveDefaultMarkup()
    {
        try
        {
            await DefMarkupProfileWriter.SetAsync(_selectedMarkupProfile);
            Snackbar.Add($"Default MarkupProfile set to '{_selectedMarkupProfile}'", Severity.Success);
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async void ResetDefaultMarkup()
    {
        _selectedMarkupProfile = await DefMarkupProfileWriter.GetAsync();
        this.StateHasChanged();
    }
    
    #endregion

    #region Default Avatar

    private void ImageFileChanged(InputFileChangeEventArgs e)
    {
        _imageFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadAvatarImage()
    {
        try
        {
            var maxFileSizeInMb = 5;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (_imageFile == null)
            {
                Snackbar.Add("Choose a file to upload", Severity.Warning);
                return;
            }

            if (_imageFile.Size > fileSizeInBytes)
            {
                Snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            var fileExtension = _imageFile.Name.Substring(_imageFile.Name.LastIndexOf('.') + 1);

            ImageTypes? imageType = fileExtension.ToLower() switch 
            {
                "svg" => ImageTypes.SVG,
                "png" => ImageTypes.PNG,
                _ => null
            };

            if (imageType == null)
            {
                Snackbar.Add("File Extension is not svg/png", Severity.Warning);
                return;
            }

            var imgArray = await CommonUtils.FileToBytesAsync(_imageFile);
            var avatarStr = Convert.ToBase64String(imgArray);

            if (imageType == ImageTypes.SVG)
            {
                await DefValuesRepository.SetTradingInstrumentAvatarSvgAsync(avatarStr);
                Snackbar.Add("New default SVG avatar saved", Severity.Success);
            }
            else
            {
                await DefValuesRepository.SetTradingInstrumentAvatarPngAsync(avatarStr);
                Snackbar.Add("New default PNG avatar saved", Severity.Success);
            }
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    #endregion
}