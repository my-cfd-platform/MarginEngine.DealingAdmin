@page "/Defaults"

@using DealingAdmin.Abstractions.Providers.Interfaces
@using Serilog.Core
@using SimpleTrading.Abstraction.Markups
@using SimpleTrading.Common.Abstractions.DefaultValues
@using SimpleTrading.QuotesFeedRouter.Abstractions
@using SimpleTrading.Common.Abstractions.Images

@inject IAvailableLiquidityProviders AvailableLiquidityProviders
@inject IMarkupProfilesRepository MarkupProfilesRepository
@inject IDefaultLiquidityProviderWriter DefLiquidityProviderWriter
@inject IDefaultMarkupProfileWriter DefMarkupProfileWriter 
@inject IDefaultValuesRepository DefValuesRepository
@inject ISnackbar Snackbar
@inject Logger Logger

<Tabs Size="@TabSize.Large">
    <TabPane Tab="LIQUIDITY PROVIDER" Key="LiquidityProvider" Class="tab-text"> 
        <Card Title="Default Liquidity Provider" Class="my-2" Style="width: 300px;">
            <Body>
                <Select DataSource="@_liquidityProviders"
                    @bind-Value="@_selectedLiquidityProvider"
	                TItemValue="string"
	                TItem="string">
                </Select>
                <AntDesign.Row Class="center-middle mt-5">
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button
                            Class="btn-text bg-color-aquamarine" 
                            OnClick="SaveDefaultLp"
                            Disabled="@(String.IsNullOrEmpty(_selectedLiquidityProvider))">Save</AntDesign.Button>
                    </Col>
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="ResetDefaultLp">Reset</AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </Body>
        </Card>
	</TabPane>
    <TabPane Tab="MARKUP PROFILE" Key="MarkupProfile" Class="tab-text">
        <Card Title="Default Markup Profile" Class="my-2" Style="width: 300px;">
            <Body>
                <Select DataSource="@_markupProfiles"
                    @bind-Value="@_selectedMarkupProfile"
	                TItemValue="string"
	                TItem="string">
                </Select>
                <AntDesign.Row Class="center-middle mt-5">
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button 
                            Class="btn-text bg-color-aquamarine"
                            OnClick="SaveDefaultMarkup" 
                            Disabled="@(String.IsNullOrEmpty(_selectedMarkupProfile))">Save</AntDesign.Button>
                    </Col>
                    <Col Span="12" Class="center-middle">
                        <AntDesign.Button Class="btn-text bg-color-light-yellow" OnClick="ResetDefaultMarkup">Reset</AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </Body>
        </Card>
    </TabPane>
    <TabPane Tab="INSTRUMENT AVATAR" Key="InstrumentAvatar" Class="tab-text">
        <Card Title="Default Instrument Avatar" Class="my-2" Style="width: 600px;">
            <Body>
                <CardGrid Style="width:50%;text-align:center">
                    <div>Default SVG Avatar:</div>
                    <Image Width="150px" Src="@_defaultAvatarSvgSrc" PreviewVisible="@false" />
                </CardGrid>
                <CardGrid Style="width:50%;text-align:center">
                    <div>Default PNG Avatar:</div>
                    <Image Width="150px" Src="@_defaultAvatarPngSrc" PreviewVisible="@false" />
                </CardGrid>
                <CardGrid Style="width:100%;" Class="my-3">
                    <AntDesign.Row>
                        <Col Span="18">
                            <div>Pick an image (svg/png) for new default avatar:</div>
                            <InputFile AdditionalAttributes=@_imageAcceptFilterDict OnChange="@ImageFileChanged"/>
                        </Col>
                        <Col Span="6">
                            <AntDesign.Button Icon="upload"
                                Type="primary"
                                Class="btn-text"
                                OnClick="@UploadAvatarImage"
                                Disabled="@(_imageFile == null)">
                                    <span>Upload</span>
                            </AntDesign.Button>
                        </Col>
                    </AntDesign.Row>
                </CardGrid>
            </Body>
        </Card>
    </TabPane>
</Tabs>

@code {
    private IEnumerable<string> _liquidityProviders;
    private IEnumerable<string> _markupProfiles;

    string _selectedLiquidityProvider;
    string _selectedMarkupProfile;
    string _defaultAvatarSvgSrc;
    string _defaultAvatarPngSrc;
    IBrowserFile _imageFile;

    private readonly Dictionary<string, object> _imageAcceptFilterDict = new ()
    {
         { "accept", "image/png, image/svg+xml" }
    };

    protected override async Task OnInitializedAsync()
    {
        _liquidityProviders = AvailableLiquidityProviders.GetLiquidityProviders();
        _markupProfiles = (await MarkupProfilesRepository.GetAllAsync()).Select(x => x.ProfileId);
        _selectedLiquidityProvider = await DefLiquidityProviderWriter.GetAsync();
        _selectedMarkupProfile = await DefMarkupProfileWriter.GetAsync();

        var avatarSvg = await DefValuesRepository.GetTradingInstrumentAvatarSvgAsync();
        var avatarPng = await DefValuesRepository.GetTradingInstrumentAvatarPngAsync();
        _defaultAvatarSvgSrc = $"{FormatUtils.ImageSvgDataPrefix}{avatarSvg}";
        _defaultAvatarPngSrc = $"{FormatUtils.ImagePngDataPrefix}{avatarPng}";
        
        await base.OnInitializedAsync();
    }

    private async void SaveDefaultLp()
    {
        try
        {
            await DefLiquidityProviderWriter.SetAsync(_selectedLiquidityProvider);
            Snackbar.Add($"Default LiquidityProvider set to '{_selectedLiquidityProvider}'", Severity.Success);
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async void ResetDefaultLp()
    {
        _selectedLiquidityProvider = await DefLiquidityProviderWriter.GetAsync();
        StateHasChanged();
    }

    private async void SaveDefaultMarkup()
    {
        try
        {
            await DefMarkupProfileWriter.SetAsync(_selectedMarkupProfile);
            Snackbar.Add($"Default MarkupProfile set to '{_selectedMarkupProfile}'", Severity.Success);
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    private async void ResetDefaultMarkup()
    {
        _selectedMarkupProfile = await DefMarkupProfileWriter.GetAsync();
        this.StateHasChanged();
    }

    private void ImageFileChanged(InputFileChangeEventArgs e)
    {
        _imageFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadAvatarImage()
    {
        try
        {
            var maxFileSizeInMb = 5;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (_imageFile == null)
            {
                Snackbar.Add("Choose a file to upload", Severity.Warning);
                return;
            }

            if (_imageFile.Size > fileSizeInBytes)
            {
                Snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            var fileExtension = _imageFile.Name.Substring(_imageFile.Name.LastIndexOf('.') + 1);

            ImageTypes? imageType = fileExtension.ToLower() switch 
            {
                "svg" => ImageTypes.SVG,
                "png" => ImageTypes.PNG,
                _ => null
            };

            if (imageType == null)
            {
                Snackbar.Add("File Extension is not svg/png", Severity.Warning);
                return;
            }

            var imgArray = await CommonUtils.FileToBytesAsync(_imageFile);
            var avatarStr = Convert.ToBase64String(imgArray);

            if (imageType == ImageTypes.SVG)
            {
                await DefValuesRepository.SetTradingInstrumentAvatarSvgAsync(avatarStr);
                Snackbar.Add("New default SVG avatar saved", Severity.Success);
            }
            else
            {
                await DefValuesRepository.SetTradingInstrumentAvatarPngAsync(avatarStr);
                Snackbar.Add("New default PNG avatar saved", Severity.Success);
            }
        }
        catch(Exception ex)
        {
            Logger.Error(ex, ex.Message);
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }
}