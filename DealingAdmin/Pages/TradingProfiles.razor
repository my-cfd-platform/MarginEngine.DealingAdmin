@page "/TradingProfiles"

@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.TradingProfiles
@using DealingAdmin.Shared.Services

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;

@if (!editFormSwitch)
{
    <PageHeader Class="m-2 p-0" Title="Trading Profiles">
        <PageHeaderExtra>
            <AntDesign.Button OnClick="ShowNewProfile" Type="@AntDesign.ButtonType.Primary">New Profile</AntDesign.Button>
        </PageHeaderExtra>
    </PageHeader>

    <Table DataSource="@tradingProfiles"
           Loading="isLoading"
           TItem="TradingProfileModel"
           Bordered="@true"
           Total="0"
           HidePagination="@true"
           ScrollY="calc(100vh - 120px)"
           PageSize="999">
        <RowTemplate>           
            <AntDesign.Column Title="Id"
                    DataIndex="Id"
                    TData="string"
                    Sortable
                    Width="240"/>
            <AntDesign.Column Title="Margin Call %" 
                    DataIndex="MarginCallPercent" 
                    TData="int"
                    Sortable
                    Width="120"/>
            <AntDesign.Column Title="Stop out %"
                    DataIndex="StopOutPercent" 
                    TData="int"
                    Sortable
                    Width="120"/>
            <AntDesign.Column Title="Topping up %"
                    DataIndex="PositionToppingUpPercent"
                    TData="int"
                    Sortable
                    Width="120"/>
            <AntDesign.Column Title="Instruments"
                    TData="string">
                @foreach (var instrument in context.Instruments)
                {
                    <Tag PresetColor="PresetColor.Purple">@instrument.Id</Tag>
                }
            </AntDesign.Column>
            <ActionColumn Title="Edit" Width="120">
                <Tooltip Title="@("Edit")">
                    <a><i @onclick="()=>ShowEditProfile(context)"
                        class="material-icons color-primary">edit</i></a>
                </Tooltip>
                <Tooltip Title="@("Clone")">
                    <a><i @onclick="()=>CloneProfile(context)"
                        class="material-icons color-aquamarine">content_copy</i></a>
                </Tooltip>
            </ActionColumn>
        </RowTemplate>
    </Table>
}
else
{
    <EditTradingProfile TradingProfile="editedProfile" OnGoBack="CloseEditProfile"/>
}

@code {
    private IEnumerable<TradingProfileModel> tradingProfiles;

    private TradingProfileModel editedProfile;
    private bool editFormSwitch = false;
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        AppState.LiveDemoModeChanged += async () =>
        {
            await RefreshData();
            this.StateHasChanged();
        };

        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        if (isLoading)
        {
            return;
        }

        try
        {
            isLoading = true;

            tradingProfiles = (await liveDemoServices.GetContext(AppState.IsLive)
                .TradingProfileRepository.GetAllAsync()).Select(TradingProfileModel.Create);

            editedProfile = new TradingProfileModel
                {
                    Id = "",
                    Instruments = new List<TradingProfileInstrumentModel>()
                };
        }
        catch(Exception ex)
        {
            Console.WriteLine($"TradingProfiles -> RefreshData Error: {ex.Message}");
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowNewProfile()
    {
        editedProfile = new TradingProfileModel
            {
                Id = "",
                Instruments = new List<TradingProfileInstrumentModel>()
            };
        editFormSwitch = true;
    }

    private void ShowEditProfile(TradingProfileModel groupProfile)
    {
        editedProfile = groupProfile;
        editFormSwitch = true;
    }

    private void CloneProfile(TradingProfileModel groupProfile)
    {
        editedProfile = TradingProfileModel.Create(groupProfile);
        editedProfile.Id = String.Empty;
        editFormSwitch = true;
    }

    private async void CloseEditProfile()
    {
        editFormSwitch = false;
        await RefreshData();
        this.StateHasChanged();
    }
}
