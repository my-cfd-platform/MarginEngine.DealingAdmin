@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Swaps

@inject StateManager AppState
@inject LiveDemoServiceMapper liveDemoServices;
@inject IUserMessageService messageService
@inject AdminAppSettings appSettings
@inject Logger logger

<div style="width:90%">
@if (!editFormSwitch)
{
    <PageHeader Class="m-0 p-0" Title="Markup Profiles">
        <PageHeaderExtra>
            <AntDesign.Button OnClick="ShowNewProfile"
                Type="@AntDesign.ButtonType.Primary"
                Class="btn-text">New Profile</AntDesign.Button>
        </PageHeaderExtra>
    </PageHeader>

    <Table DataSource="@markupProfiles"
           TItem="MarkupProfileExtModel"
           Bordered="@true"
           Total="0"
           HidePagination="@true"
           ScrollY="calc(100vh - 180px)"
           PageSize="999">
        <RowTemplate>
            <AntDesign.Column Title="Profile Id"
                DataIndex="ProfileId"
                TData="string"
                Sortable
                Width="200"/>
            <AntDesign.Column Title="Description"
                DataIndex="Description"
                TData="string"
                Sortable
                Width="200"/>
            <AntDesign.Column Title="Is Hidden"
                DataIndex="IsHidden"
                TData="bool"
                Sortable
                Width="90"/>
            <AntDesign.Column Title="Instruments" TData="string">   
                @foreach (var instrument in context.MarkupInstruments)
                {
                    <Tag PresetColor="PresetColor.Purple">@instrument.InstrumentId</Tag>
                }
            </AntDesign.Column>
            <ActionColumn Title="Edit" Width="120">
                <Tooltip Title="@("Edit")">
                    <a><i @onclick="()=>ShowEditProfile(context)"
                        class="material-icons color-primary">edit</i></a>
                </Tooltip>
                <Tooltip Title="@("Clone")">
                    <a><i @onclick="()=>CloneProfile(context)"
                        class="material-icons color-aquamarine">content_copy</i></a>
                </Tooltip>
            </ActionColumn>
        </RowTemplate>
    </Table>
}
else
{
    <EditMarkupProfile Profile="editedProfile" OnGoBack="CloseEditProfile"/>
}
</div>

@code {
    private List<MarkupProfileExtModel> markupProfiles;

    private MarkupProfileExtModel editedProfile;
    private string profileEditFormTitle;
    private bool editFormSwitch = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();

        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() =>
        {
            RefreshData().GetAwaiter().GetResult();
            this.StateHasChanged();
        });
        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        var markupProfileProps = (await liveDemoServices.GetContext(AppState.IsLive)
           .TradingGroupMarkupProfilePropertiesRepository.GetAllAsync()).ToList();

        markupProfiles = (await liveDemoServices.GetContext(AppState.IsLive)
           .TradingGroupsMarkupProfilesRepository.GetAllAsync())
           .Select(x => x.ToExtModel(markupProfileProps.FirstOrDefault(p => p.ProfileId == x.ProfileId))).ToList();

        editedProfile = new MarkupProfileExtModel
            {
                ProfileId = "",
                MarkupInstruments = new List<MarkupItem>()
            };
    }

    private void ShowNewProfile()
    {
        profileEditFormTitle = "Add New Markup Profile";
        editedProfile = new MarkupProfileExtModel
            {
                ProfileId = "",
                MarkupInstruments = new List<MarkupItem>()
            };
        editFormSwitch = true;
    }

    private void ShowEditProfile(MarkupProfileExtModel markupProfile)
    {
        profileEditFormTitle = $"Edit '{markupProfile.ProfileId}' Markup Profile";
        editedProfile = markupProfile;
        editFormSwitch = true;
    }

    private void CloneProfile(MarkupProfileExtModel markupProfile)
    {
        profileEditFormTitle = "Add New Markup Profile";
        editedProfile = new MarkupProfileExtModel
            {
                ProfileId = "",
                MarkupInstruments = markupProfile.MarkupInstruments
            };
        editFormSwitch = true;
    }

    private async void CloseEditProfile()
    {
        editFormSwitch = false;
        await RefreshData();
    }
}