@using AntDesign
@using AntDesign.TableModels
@using System.Text.Json
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.Swaps

@inject ITradingInstrumentsRepository InstrumentsRepository
@inject ISwapProfileWriter SwapProfileWriter
@inject ISwapProfileUploadService SwapProfileUploadService
@inject AdminAppSettings appSettings
@inject ISnackbar snackbar
@inject Logger logger

<PageHeader Class="m-0 p-0" Title="@pageTitle"/>
<AntDesign.Row>
    <Col Span="16">
        <Form Model="ProfileGroup"        
                ValidateOnChange="@true"
                ValidateMode="@FormValidateMode.Rules">
            <FormItem Label="Profile Id" Rules=@RequiredRule>
                <Input @bind-Value="@context.ProfileId"
                        Placeholder="Profile Id"
                        Style="width:300px"
                        Size="@InputSize.Large" 
                        Disabled="@(!isNewProfile)"
                        Rules=@RequiredRule/>
            </FormItem>            
        </Form>
    </Col>
    <Col Flex=@("auto")></Col>
    <Col Flex=@("160px")>
        <AntDesign.Button Icon="check"
            Class="btn-text bg-color-aquamarine"
            OnClick="SaveSwapProfile"
            Disabled="@(String.IsNullOrEmpty(ProfileGroup.ProfileId))">Save</AntDesign.Button>
    </Col>
    <Col Flex=@("160px")>
        <AntDesign.Button Icon="arrow-left"
            Class="btn-text bg-color-yellow"
            OnClick="GoBack">Back</AntDesign.Button>
    </Col>
</AntDesign.Row>

<Table DataSource="@ProfileGroup.Instruments"
       TItem="SwapProfileModel"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 300px)" 
       PageSize="999">
    <TitleTemplate>
        <PageHeader Title="Profile Instruments" Class="m-0 p-0">
            <PageHeaderExtra>
                 <AntDesign.Button 
                    OnClick="ShowLoadFileDialog" 
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text mx-3">Load from Excel file</AntDesign.Button>
                 <AntDesign.Button 
                    OnClick="ShowNewInstrumentDialog" 
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text">Add Instrument</AntDesign.Button>
            </PageHeaderExtra>
        </PageHeader>
    </TitleTemplate>
    <RowTemplate>           
        <AntDesign.Column Title="Instrument Id"
                TData="string"
                DataIndex="InstrumentId"
                Sortable/>
        <AntDesign.Column Title="Long"
                TData="double"
                DataIndex="Long"
                Sortable/>
        <AntDesign.Column Title="Short"
                TData="double"
                DataIndex="Short"
                Sortable/>
        <ActionColumn Title="Actions">
            <Tooltip Title="@("Edit")">
                <a><i @onclick="()=>ShowEditInstrumentDialog(context)"
                    class="material-icons color-primary">edit</i></a>
            </Tooltip>
            <Tooltip Title="@("Clone")">
                <a><i @onclick="()=>CloneInstrument(context)"
                    class="material-icons color-aquamarine">content_copy</i></a>
            </Tooltip>
            <Tooltip Title="@("Delete")">
                <Popconfirm Title="Are you sure?" OkText="Confirm" CancelText="Cancel">
                    <a><i @onclick="()=>DeleteInstrument(context)"
                        class="material-icons color-crimson">delete_outline</i></a>
                </Popconfirm>
            </Tooltip>
        </ActionColumn>
    </RowTemplate>
</Table>

<Modal Title="@instrumentEditFormTitle"
       Visible="@isEditInstrumentDialogVisible"
       Closable="@false"
       Footer=null
       Width="480">
    <Form Model="editedInstrument"        
            LabelColSpan="6"
            WrapperColSpan="18"     
            ValidateOnChange="@true"
            ValidateMode="@FormValidateMode.Rules">
        <FormItem Label="Instrument Id" Rules=@RequiredRule>
            <Select DataSource="@availableInstruments"
                @bind-Value="@context.InstrumentId"
	            TItemValue="string"
	            TItem="string"
                Disabled="@(selectedInstrument != null)"
                EnableSearch>
            </Select>
        </FormItem>
        <FormItem Label="Long %" Required Rules=@RequiredIntRule>
            <AntDesign.InputNumber @bind-Value="@context.Long" />
        </FormItem>            
        <FormItem Label="Short %" Required Rules=@RequiredIntRule>
            <AntDesign.InputNumber @bind-Value="@context.Short" />
        </FormItem>
        <AntDesign.Row Class="center-middle py-3">
            <Col Span="12">
            </Col>    
            <Col Span="6">
                <AntDesign.Button OnClick="SaveInstrument"
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text">Save</AntDesign.Button>
            </Col>    
            <Col Span="6">
                <AntDesign.Button OnClick="CancelEditInstrumentDialog"
                    Class="btn-text">Cancel</AntDesign.Button>
            </Col>
        </AntDesign.Row>
    </Form> 
</Modal>


<Modal Title="Swaps Excel File Upload"
       Visible="@isExcelUploadDialogVisible"
       Closable="@false"
       Footer=null
       Width="480">
    <AntDesign.Row>
        <Col class="m-3">
            <div>Swaps Excel File:</div>
            <InputFile OnChange="@FileChanged"/>
        </Col>
    </AntDesign.Row>
    <AntDesign.Row Class="center-middle p-3">
        <Col Span="18">
            <AntDesign.Button Icon="upload" OnClick="@UploadSwaps" Disabled="@(swapsFile == null)">
                <span>Upload</span>
            </AntDesign.Button>
        </Col>    
        <Col Span="6">
            <AntDesign.Button OnClick="CloseExcelUploadDialog"
                Class="btn-text">Cancel</AntDesign.Button>
        </Col>
    </AntDesign.Row>
</Modal>


@code {
    [Parameter]
    public SwapGroupProfile ProfileGroup { get; set; }

    [Parameter]
    public EventCallback OnGoBack { get; set; }

    SwapProfileModel selectedInstrument;
    SwapProfileModel editedInstrument = new SwapProfileModel();
    List<string> instrumentIds;
    List<string> availableInstruments;

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };
    private FormValidationRule[] RequiredIntRule = { new FormValidationRule { Required = true, Type = FormFieldType.Integer } };
    private FormValidationRule[] CrudApiKeyRule;

    private string profileId { get; set; }

    private bool isNewProfile = true;
    IBrowserFile swapsFile;
    private string pageTitle = "Add New Swap Profile";
    private string instrumentEditFormTitle = "";
    private bool isEditInstrumentDialogVisible;
    private bool isExcelUploadDialogVisible;

    protected override async Task OnInitializedAsync()
    {
        if (!String.IsNullOrEmpty(ProfileGroup.ProfileId))
        {
            profileId = ProfileGroup.ProfileId;
            pageTitle = $"Edit '{profileId}' Swap Profile";
            isNewProfile = false;
        }

        CrudApiKeyRule = new FormValidationRule[]
        {
            new FormValidationRule
                {
                    Required = true,
                    Type = FormFieldType.String,
                    OneOf = new string[] { appSettings.AdminCrudApiKey },
                    Message = "API Key is not valid"
                }
        };

        instrumentIds = (await InstrumentsRepository.GetAllAsync()).Select(x => x.Id).ToList();
        availableInstruments = GetAvailableInstrumentsList();

        await base.OnInitializedAsync();
    }

    private void ShowLoadFileDialog()
    {
        swapsFile = null;
        isExcelUploadDialogVisible = true;
    }

    private void FileChanged(InputFileChangeEventArgs e)
    {
        swapsFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private void CloseExcelUploadDialog()
    {
        isExcelUploadDialogVisible = false;
    }

    private async Task UploadSwaps()
    {
        try
        {
            var maxFileSizeInMb = 10;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (swapsFile == null)
            {
                snackbar.Add($"Choose a file to upload", Severity.Warning);
                return;
            }

            if (swapsFile.Size > fileSizeInBytes)
            {
                snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            var swapItems = await SwapProfileUploadService.ParseSwapItemsFromExcelFile(
                swapsFile,
                String.IsNullOrEmpty(profileId) ? "" : profileId);

            if (swapItems.Any())
            {
                ProfileGroup.Instruments = swapItems;
                snackbar.Add($"{swapItems.Count} Instruments were updated", Severity.Success);
                CloseExcelUploadDialog();
                this.StateHasChanged();
            }
        }
        catch (Exception e)
        {
            snackbar.Add(e.Message, Severity.Error);
        }
    }

    private List<string> GetAvailableInstrumentsList()
    {
        var resultSet = new List<string>();

        if (selectedInstrument != null)
        {
            resultSet.Add(selectedInstrument.InstrumentId);
        }
        else if (ProfileGroup.Instruments.Any()) 
        {
            foreach(var instId in instrumentIds)
            {
                if (!ProfileGroup.Instruments.Where(x => x.InstrumentId == instId).Any())
                {
                    resultSet.Add(instId);
                }
            }
        }
        else
        {
            resultSet.AddRange(instrumentIds);
        }

        return resultSet;
    }

    private void SaveInstrument()
    {
        if (selectedInstrument != null)
        {
            selectedInstrument.Long = editedInstrument.Long;
            selectedInstrument.Short = editedInstrument.Short;
        }
        else
        {
            ProfileGroup.Instruments.Add(editedInstrument);
        }

        isEditInstrumentDialogVisible = false;
    }

    private void ShowNewInstrumentDialog()
    {
        selectedInstrument = null;
        availableInstruments = GetAvailableInstrumentsList();

        editedInstrument = new SwapProfileModel 
        {
            Id = profileId,
            InstrumentId = availableInstruments.FirstOrDefault()
        };

        instrumentEditFormTitle = $"Add New Instrument for Swap Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void ShowEditInstrumentDialog(SwapProfileModel swapItem)
    {
        selectedInstrument = swapItem;
        editedInstrument = SwapProfileModel.Create(swapItem);
        availableInstruments = GetAvailableInstrumentsList();
        instrumentEditFormTitle = $"Edit '{swapItem.InstrumentId}' Instrument for Swap Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void CloneInstrument(SwapProfileModel swapItem)
    {
        selectedInstrument = null;
        editedInstrument = SwapProfileModel.Create(swapItem);
        availableInstruments = GetAvailableInstrumentsList();
        instrumentEditFormTitle = $"Add New Instrument for Swap Profile {profileId}";
        isEditInstrumentDialogVisible = true;
    }

    private void DeleteInstrument(SwapProfileModel swapItem)
    {
        ProfileGroup.Instruments.Remove(swapItem);
    }

    private void CancelEditInstrumentDialog()
    {
        isEditInstrumentDialogVisible = false;
    }

    private async void SaveSwapProfile()
    {
        try
        {
            int errorCount = 0;
            var instruments = await InstrumentsRepository.GetAllAsync();

            foreach (var item in ProfileGroup.Instruments)
            {
                item.Id = ProfileGroup.ProfileId;

                if (instruments.All(inst => inst.Id != item.InstrumentId))
                {
                    snackbar.Add($"Instrument {item.InstrumentId} is not found", Severity.Error);
                    errorCount++;
                }

                await SwapProfileWriter.AddOrUpdate(item);
            }

            if (errorCount > 0)
            {
                var totalCount = ProfileGroup.Instruments.Count;
                snackbar.Add($"[{totalCount - errorCount}] of [{totalCount}] Instruments for Swap Profile '{profileId}' saved", Severity.Warning);
            }
            else
            {
                snackbar.Add($"Instruments for Swap Profile '{profileId}' saved", Severity.Success);
            }
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occured: {ex.Message}", Severity.Error);
        }
    }

    private async void GoBack()
    {
        await OnGoBack.InvokeAsync();
    }
}