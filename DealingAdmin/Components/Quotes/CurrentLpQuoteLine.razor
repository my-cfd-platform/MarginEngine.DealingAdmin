@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Services
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.BidAsk

@inject IBidAskCache bidAskCache
@inject IPriceRetriever priceRetriever

<div class="grid-container-lp-quote-line">    
    <div>
        @if (bidAsk == null)
        {
            <i class="material-icons color-crimson font-18">warning_amber</i>
        }
    </div>
    <div><span class="text-bold">Current</span></div>
    <div>@bidAsk?.Bid.ToString($"F{digits}")</div>
    <div><span class="text-bold">Current</span></div>
    <div>@bidAsk?.Ask.ToString($"F{digits}")</div>
    <div><span class="text-bold">Current</span></div>
    <div>@spread</div>
    <div><span class="text-bold">Current</span></div>    
    <div><span class="@((bidAsk != null && bidAsk.TimeWarning) ? "color-orange" : "")">@bidAsk?.Date</span></div>
</div>

@code {
    [Parameter]
    public InstrumentQuoteModel Instrument { get; set; }

    private BidAskModel bidAsk { get; set; }
    private bool isUpdating = false;
    private int digits = 2;
    private int spread;

    protected override void OnInitialized()
    {
        digits = Instrument.Digits;
        var nowBidAsk = bidAskCache.Get(Instrument.Id);

        if (nowBidAsk != null)
        {
            bidAsk = nowBidAsk.ToBidAskModel();
            spread = FxUtils.CalcSpread(bidAsk, digits);
        }
        else
        {
            bidAsk = null;
        }

        AppJobService.QuotesUpdateEvent += async () => await InvokeAsync(() => UpdateBidAsk());
        
        base.OnInitialized();
    } 

    private void UpdateBidAsk()
    {
        if (isUpdating)
        {
            return;
        }

        isUpdating = true;

        var currentBidAsk = priceRetriever.GetBidAsk(Instrument.Id);

        if (currentBidAsk != null)
        {
            SetBidAsk(currentBidAsk);
        }

        isUpdating = false;      
    }

    public void SetBidAsk(BidAskModel bidAskNow)
    {
        bidAsk = bidAskNow;
        spread = FxUtils.CalcSpread(bidAsk, digits);
        this.StateHasChanged();
    }
}
