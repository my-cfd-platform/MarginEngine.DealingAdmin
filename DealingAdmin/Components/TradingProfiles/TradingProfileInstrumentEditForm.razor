@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using Microsoft.AspNetCore.Components
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup
@using SimpleTrading.Abstraction.Trading.Settings

@inject ISnackbar snackbar

<Form @ref="editForm" 
      Model="Instrument"        
      LabelColSpan="12"
      WrapperColSpan="12"
      ValidateOnChange="@true"
      ValidateMode="@FormValidateMode.Rules">
    <Validator>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </Validator>
    <ChildContent>
        <FormItem Label="Instrument Id" Rules=@RequiredRule>
            <Select DataSource="@AvailableInstruments"
                @bind-Value="@context.Id"
	            TItemValue="string"
	            TItem="string"
                Disabled="@(!isNewInstrument)"
                EnableSearch>
            </Select>
        </FormItem>
        <FormItem Label="Max Position Volume" Required Rules=@RequiredNumberRule>
            <Input @bind-Value="context.MaxPositionVolume" Placeholder="Max Position Volume" TValue="double"/>
        </FormItem>
        <FormItem Label="Min Operation Volume" Required Rules=@RequiredNumberRule>
            <Input @bind-Value="context.MinOperationVolume" Placeholder="Min Operation Volume" TValue="double"/>
        </FormItem>
        <FormItem Label="Max Operation Volume" Required Rules=@RequiredNumberRule>
            <Input @bind-Value="context.MaxOperationVolume" Placeholder="Max Operation Volume" TValue="double"/>
        </FormItem>
        <FormItem Label="Open Position Max Delay" Required Rules=@RequiredIntRule>             
            <Input @bind-Value="context.OpenPositionMaxDelayMs" Placeholder="Open Position Max Delay (ms)" TValue="int"/>
        </FormItem>
        <FormItem Label="Stop out %" Required>
            <Input @bind-Value="context.StopOutPercent" Placeholder="Stop out %" TValue="double?"/>
        </FormItem>
        <FormItem Label="Leverages">
            <LeveragesEditor @bind-Instrument="@context"/>
        </FormItem>        
        <FormItem Label="Take Profit Slippage" Required>
            <Checkbox Checked="@context.TpSlippage" @bind-Value="context.TpSlippage"/>
        </FormItem>       
        <FormItem Label="Stop Loss Slippage" Required>
            <Checkbox Checked="@context.SlSlippage" @bind-Value="context.SlSlippage"/>
        </FormItem>       
        <FormItem Label="Slippage on Open Positions" Required>
            <Checkbox Checked="@context.OpenPositionSlippage" @bind-Value="context.OpenPositionSlippage"/>
        </FormItem>
        <AntDesign.Row Class="center-middle p-3">
            <Col Span="12">
            </Col>    
            <Col Span="6">
                <AntDesign.Button OnClick="SaveInstrument"
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text">Save</AntDesign.Button>
            </Col>    
            <Col Span="6">
                <AntDesign.Button OnClick="CancelEditInstrumentDialog"
                    Class="btn-text">Cancel</AntDesign.Button>
            </Col>
        </AntDesign.Row>
    </ChildContent>
</Form>
 
@code {
    [Parameter]
    public TradingProfileInstrumentModel Instrument { get; set; } = new();

    [Parameter]
    public EventCallback<TradingInstrumentModel> InstrumentChanged { get; set; }

    [Parameter]
    public List<string> AvailableInstruments { get; set; } = new();

    [Parameter]
    public EventCallback OnSave { get; set; }

    [Parameter]
    public EventCallback OnCancel { get; set; }

    AntDesign.Form<TradingProfileInstrumentModel> editForm;

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };
    private FormValidationRule[] RequiredIntRule = { new FormValidationRule { Required = true, Type = FormFieldType.Integer } };
    private FormValidationRule[] RequiredNumberRule = { new FormValidationRule { Required = true, Type = FormFieldType.Number } };

    private bool isNewInstrument = true;

    protected override void OnInitialized()
    {
        isNewInstrument = String.IsNullOrEmpty(Instrument.Id);
        
        base.OnInitialized();
    }

    private async void SaveInstrument()
    {
        if (!editForm.Validate())
        {
            return;
        }

        await OnSave.InvokeAsync();
    }

    private async void CancelEditInstrumentDialog()
    {
        await OnCancel.InvokeAsync();
    }
}