@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Shared.Services
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Settings
@using System.IO
@using System.Diagnostics
@using DealingAdmin.Abstractions.Interfaces
@using DealingAdmin.Abstractions.Models.BidAskSb
@using DealingAdmin.Abstractions.Providers.Interfaces
@using MyServiceBus.Sdk
@using SimpleTrading.Abstraction.BidAsk
@using SimpleTrading.Abstraction.Trading.Instruments

@inject ICache<ITradingInstrument> InstrumentsCache
@inject IUserMessageService MessageService
@inject MyServiceBusPublisher<IBidAskSb> bidAskPublisher
@inject ISnackbar snackbar
@inject AdminAppSettings appSettings
@inject Logger logger

<div style="width:600px;">
<Title Level="4">Synthetic Price </Title>
<Form @ref="priceForm"
      Model="_price"
      ValidateOnChange="@true"
      ValidateMode="@FormValidateMode.Rules"
      LabelColSpan="6"
      WrapperColSpan="12">
    <Validator>
        <DataAnnotationsValidator></DataAnnotationsValidator>
    </Validator>
    <ChildContent>
        <FormItem Label="Instrument Id" Rules=@RequiredRule>
            <Select DataSource="@instrumentIds"
                @bind-Value="@context.Id"
	            TItemValue="string"
	            TItem="string"
                EnableSearch>
            </Select>
        </FormItem>
        <FormItem Label="Bid" Required Rules=@RequiredNumberRule>
            <AntDesign.InputNumber @bind-Value="@context.Bid" />
        </FormItem>
        <FormItem Label="Ask" Required Rules=@RequiredNumberRule>
            <AntDesign.InputNumber @bind-Value="@context.Ask" />
        </FormItem>
         <FormItem Label="API Key" Required Rules=@CrudApiKeyRule>
            <InputPassword @bind-Value="@context.ApiKey" />
        </FormItem>
        <AntDesign.Row Class="center-middle p-3">
            <Col Span="18">
            </Col>    
            <Col Span="6">
                <AntDesign.Button Icon="send"
                    OnClick="@SendPrice"
                    Type="@AntDesign.ButtonType.Primary"
                    Class="btn-text"
                    Disabled="@(_price.Bid == 0 || _price.Ask == 0)">
                    Send Price
                </AntDesign.Button>
            </Col>
        </AntDesign.Row>
    </ChildContent>
</Form>
</div>

@code {
    AntDesign.Form<PriceThrower> priceForm;

    List<string> instrumentIds = new List<string>();
    PriceThrower _price = new();

    private FormValidationRule[] RequiredRule = { new FormValidationRule { Required = true } };
    private FormValidationRule[] RequiredNumberRule = { new FormValidationRule { Required = true, Type = FormFieldType.Number } };
    private FormValidationRule[] CrudApiKeyRule;

    protected override void OnInitialized()
    {
        var instList = InstrumentsCache.GetAll().ToList();
        instrumentIds = instList.Select(x => x.Id).ToList();

        if (instrumentIds.Any())
        {
            _price.Id = instrumentIds.First();
        }

        CrudApiKeyRule = new FormValidationRule[]
        {
            new FormValidationRule
                {
                    Required = true,
                    Type = FormFieldType.String,
                    OneOf = new string[] { appSettings.AdminCrudApiKey },
                    Message = "API Key is not valid"
                }
        };
        
        base.OnInitialized();
    }

    private async void SendPrice()
    {
        try
        {
            if (!priceForm.Validate())
            {
                return;
            }

            await bidAskPublisher.PublishAsync(new BidAskSb
                {
                    Id = _price.Id,
                    Bid = _price.Bid,
                    Ask = _price.Ask,
                    JsUnixTime = GetJsUnixTime(DateTime.UtcNow)
                });

            snackbar.Add($"Price for {_price.Id} [B:{_price.Bid}|A:{_price.Ask}] published", Severity.Success);
        }
        catch(Exception ex)
        {
            //todo should it be an error?
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error occurred: {ex.Message}", Severity.Error);
        }
    }

    private ulong GetJsUnixTime(DateTime time)
    {
        return (ulong)time.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds;
    }
}
