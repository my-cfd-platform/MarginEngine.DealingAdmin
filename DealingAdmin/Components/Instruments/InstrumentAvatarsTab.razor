@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Components.Instruments.Forms
@using DealingAdmin.Shared.Models
@using Serilog.Core
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.InstrumentsGroup
@using SimpleTrading.Abstraction.Trading.Swaps
@using SimpleTrading.Common.Abstractions.DefaultValues
@using SimpleTrading.Common.Abstractions.InstrumentsAvatar
@using SimpleTrading.Common.Abstractions.Images
@using SimpleTrading.Common.MyNoSql.InstrumentsAvatar
@using SimpleTrading.MyNoSqlRepositories.InstrumentSourcesMaps
@using SimpleTrading.QuotesFeedRouter.Abstractions
@using static DealingAdmin.FormatUtils

@inject ITradingInstrumentsRepository InstrumentsRepository
@inject TradingInstrumentMyNoSqlRepository avatarRepository
@inject InstrumentSourcesMapsMyNoSqlRepository sourcesMapsRepository
@inject TradingInstrumentMyNoSqlRepository imagesMyNoSqlRepository
@inject IDefaultValuesRepository defValuesRepository
@inject AdminAppSettings appSettings
@inject ISnackbar snackbar
@inject Logger logger

<PageHeader Class="mb-2 p-0" Title="Instruments">
</PageHeader>
<Table DataSource="@tradingInstruments"
       TItem="TradingInstrumentModel"
       Loading="@isLoading"
       Bordered="@true"
       Total="0"
       HidePagination="@true"
       ScrollY="calc(100vh - 200px)"
       PageSize="999">
    <RowTemplate>
        <AntDesign.Column Title="Group"
                TData="string"
                DataIndex="GroupId"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Id"
                TData="string"
                DataIndex="Id"
                Sortable>
            <p>Id: <b>@context.Id</b></p>
            <p>Name: <b>@context.Name</b></p>
        </AntDesign.Column>
        <AntDesign.Column Title="Weight"
            TData="int?"
            DataIndex="Weight"
            Sortable
            Width="80"/>
        <AntDesign.Column Title="Sub group" 
                DataIndex="SubGroupId" 
                TData="string"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Avatar"
                TData="string"
                Width="80">
            <a @onclick="()=>ShowEditAvatarDialog(context)">
                @if (dictAvatars[context.Id].ContainsKey(ImageTypes.SVG))
                {
                    <Image Preview="@false" 
                        Src="@($"{FormatUtils.ImageSvgDataPrefix}{dictAvatars[context.Id][ImageTypes.SVG].Avatar}")"/>
                }
                else if (dictAvatars[context.Id].ContainsKey(ImageTypes.PNG))
                {
                    <Image Preview="@false" 
                        Src="@($"{FormatUtils.ImagePngDataPrefix}{dictAvatars[context.Id][ImageTypes.PNG].Avatar}")"/>
                }
                else
                {
                    <div>NoData</div>
                }
            </a>
        </AntDesign.Column>
    </RowTemplate>
</Table>

<Modal Title="@avatarEditFormTitle"
       Visible="@isEditAvatartDialogVisible"
       Footer=@null
       Closable=@false
       Width="640">
    <Card Title="Current Instrument Avatar" Class="my-2" Style="width: 600px;">
        <Body>
            <CardGrid Style="width:50%;text-align:center">
                <div>Current SVG Avatar:</div>
                @if (dictAvatars[editedInstrument.Id].ContainsKey(ImageTypes.SVG))
                {
                    <Image Preview="@false" Width="150px"
                        Src="@($"{FormatUtils.ImageSvgDataPrefix}{dictAvatars[editedInstrument.Id][ImageTypes.SVG].Avatar}")"/>
                }
            </CardGrid>
            <CardGrid Style="width:50%;text-align:center">
                <div>Current PNG Avatar:</div>
                @if (dictAvatars[editedInstrument.Id].ContainsKey(ImageTypes.PNG))
                {
                    <Image Preview="@false" Width="150px"
                        Src="@($"{FormatUtils.ImagePngDataPrefix}{dictAvatars[editedInstrument.Id][ImageTypes.PNG].Avatar}")"/>
                }
            </CardGrid>
            <CardGrid Style="width:100%;" Class="my-3">
                <AntDesign.Row>
                    <Col Span="18">
                        <div>Pick an image (svg/png) for new avatar:</div>
                        <InputFile AdditionalAttributes=@imageAcceptFilterDict OnChange="@ImageFileChanged"/>
                    </Col>
                    <Col Span="6">
                        <AntDesign.Button Icon="upload"
                            Type="primary"
                            Class="btn-text"
                            OnClick="@UploadAvatarImage"
                            Disabled="@(imageFile == null)">
                                <span>Upload</span>
                        </AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </CardGrid>
            <CardGrid Style="width:100%;">
                <AntDesign.Row>
                </AntDesign.Row>
                <AntDesign.Row>
                    <Col Span="20">
                    </Col>   
                    <Col Span="4">
                        <AntDesign.Button OnClick="CloseEditAvatarDialog" Class="btn-text">
                            Close
                        </AntDesign.Button>
                    </Col>
                </AntDesign.Row>
            </CardGrid>
        </Body>
    </Card>
</Modal>

@code {
    private List<TradingInstrumentModel> tradingInstruments;

    private bool isLoading = false;
    private TradingInstrumentModel editedInstrument;
    private bool isEditAvatartDialogVisible;
    private string avatarEditFormTitle;

    private Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>> dictAvatars
        = new Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>>();

    Dictionary<string, object> imageAcceptFilterDict = new Dictionary<string, object>()
    {
         { "accept", "image/png, image/svg+xml" }
    };

    string defaultAvatarSvgSrc;
    string defaultAvatarPngSrc;
    IBrowserFile imageFile;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        await RefreshAvatars();
        await base.OnInitializedAsync();
    }

    private async Task RefreshData()
    {
        isLoading = true;

        tradingInstruments = (await InstrumentsRepository.GetAllAsync())
            .Select(x => TradingInstrumentModel.Create(x)).ToList();

        isLoading = false;
    }

    private async Task RefreshAvatars()
    {
        isLoading = true;

        var defaultAvatarSvg = await defValuesRepository.GetTradingInstrumentAvatarSvgAsync();
        var defaulAvatarPng = await defValuesRepository.GetTradingInstrumentAvatarPngAsync();
        defaultAvatarSvgSrc = $"{FormatUtils.ImageSvgDataPrefix}{defaultAvatarSvg}";        
        defaultAvatarPngSrc = $"{FormatUtils.ImagePngDataPrefix}{defaulAvatarPng}";

        dictAvatars = new Dictionary<string, Dictionary<ImageTypes, ITradingInstrumentsAvatar>>();

        var instruments = await InstrumentsRepository.GetAllAsync();

        foreach (var inst in instruments)
        {
            await InitAvatarById(inst.Id);
        }

        isLoading = false;
    }

    private async Task InitAvatarById(string instrumentId)
    {
        var avatarSvg = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, ImageTypes.SVG);
        var avatarPng = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, ImageTypes.PNG);

        dictAvatars.Add(instrumentId, new Dictionary<ImageTypes, ITradingInstrumentsAvatar>());

        if (avatarSvg != null)
        {
            dictAvatars[instrumentId].Add(ImageTypes.SVG, avatarSvg);
        }

        if (avatarPng != null)
        {
            dictAvatars[instrumentId].Add(ImageTypes.PNG, avatarPng);
        }
    }

    private async Task RefreshAvatarById(string instrumentId, ImageTypes imgType)
    {
        var avatar = await imagesMyNoSqlRepository.GetInstrumentsAvatarAsync(instrumentId, imgType);

        if (!dictAvatars.ContainsKey(instrumentId))
        {
            dictAvatars.Add(instrumentId, new Dictionary<ImageTypes, ITradingInstrumentsAvatar>());
        }

        if (avatar != null)
        {
            if (dictAvatars[instrumentId].ContainsKey(imgType))
            {
                dictAvatars[instrumentId][imgType] = avatar;
            }
            else
            {
                dictAvatars[instrumentId].Add(imgType, avatar);
            }
        }
    }

    private void ShowEditAvatarDialog(TradingInstrumentModel avatarInstrument)
    {
        avatarEditFormTitle = $"Edit Avatar for '{avatarInstrument.Name}'";
        editedInstrument = avatarInstrument;
        isEditAvatartDialogVisible = true;
    }

    private void ImageFileChanged(InputFileChangeEventArgs e)
    {
        imageFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadAvatarImage()
    {
        try
        {
            var maxFileSizeInMb = 5;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (imageFile == null)
            {
                snackbar.Add("Choose a file to upload", Severity.Warning);
                return;
            }

            if (imageFile.Size > fileSizeInBytes)
            {
                snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            var fileExtension = imageFile.Name.Substring(imageFile.Name.LastIndexOf('.') + 1);

            ImageTypes? imageType = fileExtension.ToLower() switch 
            {
                "svg" => ImageTypes.SVG,
                "png" => ImageTypes.PNG,
                _ => null
            };

            if (imageType == null)
            {
                snackbar.Add("File Extension is not svg/png", Severity.Warning);
                return;
            }

            var imgArray = await CommonUtils.FileToBytesAsync(imageFile);
            var avatarStr = Convert.ToBase64String(imgArray);

            await imagesMyNoSqlRepository.UpdateAsync(editedInstrument.Id, avatarStr, imageType.Value);
            snackbar.Add($"New {imageType.Value.ToString()} avatar for '{editedInstrument.Name}' saved", Severity.Success);
            await RefreshAvatarById(editedInstrument.Id, imageType.Value);
            StateHasChanged();
        }
        catch(Exception ex)
        {
            logger.Error(ex, ex.Message);
            snackbar.Add($"Error during saving new avatar for '{editedInstrument.Name}': {ex.Message}", Severity.Error);
        }
    }

    private void CloseEditAvatarDialog()
    {
        isEditAvatartDialogVisible = false;        
    }
}