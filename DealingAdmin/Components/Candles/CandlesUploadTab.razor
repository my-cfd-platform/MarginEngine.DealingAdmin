@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.Trading.Settings
@using SimpleTrading.Abstraction.Candles
@using System.IO
@using System.Diagnostics
@using DealingAdmin.Abstractions.Providers.Interfaces
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.CandlesHistory.Grpc
@using SimpleTrading.CandlesHistory.Grpc.Contracts

@inject ICache<ITradingInstrument> InstrumentsCache
@inject ICandlesService CandlesService
@inject ISimpleTradingCandlesHistoryGrpc CandlesHistoryGrpc
@inject ISnackbar snackbar

<Title Level="4">Upload Candles History</Title>
<AntDesign.Row>
    <Col Xs="24" Sm="24" Md="18" Lg="14" Xl="6" class="m-3">
        <div class="m-1">Instrument:</div>
        <Select
            DataSource="@instrumentIds"
            @bind-Value="@instrumentId"
		    TItemValue="string"
		    TItem="string"
            EnableSearch>
        </Select>
    </Col>
    <Col Xs="16" Sm="12" Md="6" Lg="6" Xl="4" class="m-3">
        <div class="m-1">Type:</div>
        <Select Mode="default"
                @bind-Value="@candleType"
                TItemValue="CandleType"
                TItem="CandleType">
            <SelectOptions>
                @foreach (var item in Enum.GetValues<CandleType>())
                {
                    <SelectOption
                        TItemValue="CandleType"
                        TItem="CandleType"
                        Value=@item
                        Label="@item.ToString()"/>
                }
            </SelectOptions>
        </Select>
    </Col>
</AntDesign.Row>
<AntDesign.Row>
    <Col Xs="24" Sm="24" Md="20" Lg="16" Xl="8" class="m-3">
        <div>Candles History File:</div>
        <InputFile OnChange="@FileChanged"/>
    </Col>
    <Col Xs="6" Sm="6" Md="4" Lg="4" Xl="4" class="mx-3">
        <br/>
        <AntDesign.Button Icon="upload" OnClick="@UploadCandles" Disabled="@(candlesFile == null)">
            <span>Upload</span>
        </AntDesign.Button>
    </Col>
</AntDesign.Row>

<Divider />

<AntDesign.Row>
    <Title Level="4">Refresh Candles Cache</Title>
</AntDesign.Row>
<AntDesign.Row>
    <Col Span="2" class="m-3">
        <div class="m-1">Is bid:</div>
        <Select Mode="default"
                @bind-Value="@isBid"
                TItemValue="bool"
                TItem="bool">
            <SelectOptions>
                <SelectOption
                    TItemValue="bool"
                    TItem="bool"
                    Value="@true"
                    Label="Yes"/>
                <SelectOption
                    TItemValue="bool"
                    TItem="bool"
                    Value="@false"
                    Label="No"/>
            </SelectOptions>
        </Select>
    </Col>
    <Col Xs="24" Sm="24" Md="18" Lg="14" Xl="6" class="m-3">
        <div class="m-1">Instrument:</div>
        <Select
            DataSource="@instrumentIds"
            @bind-Value="@instrumentId"
            TItemValue="string"
            TItem="string"
            EnableSearch>
        </Select>
    </Col>
    <Col Xs="16" Sm="12" Md="6" Lg="6" Xl="4" class="m-3">
        <div style="margin-top: 30px;"></div>
        <AntDesign.Button Icon="reload" OnClick="@RefreshCache">
            <span>Refresh</span>
        </AntDesign.Button>
    </Col>
</AntDesign.Row>

@code {
    List<string> instrumentIds = new List<string>();
    string instrumentId;
    CandleType candleType = CandleType.Minute;
    IBrowserFile candlesFile;
    bool isBid = true;

    protected override void OnInitialized()
    {
        var instList = InstrumentsCache.GetAll().ToList();
        instrumentIds = instList.Select(x => x.Id).ToList();

        if (instrumentIds.Any())
        {
            instrumentId = instrumentIds.First();
        }
        
        base.OnInitialized();
    }

    private void FileChanged(InputFileChangeEventArgs e)
    {
        candlesFile = e.File;
        InvokeAsync(StateHasChanged);
    }

    private async Task UploadCandles()
    {
        try
        {
            var maxFileSizeInMb = 15;
            var fileSizeInBytes = maxFileSizeInMb * 1024 * 1024;

            if (candlesFile == null)
            {
                snackbar.Add($"Choose a file to upload", Severity.Warning);
                return;
            }

            if (candlesFile.Size > fileSizeInBytes)
            {
                snackbar.Add($"Max file size is {maxFileSizeInMb} MB", Severity.Warning);
                return;
            }

            if (!candlesFile.Name.EndsWith(".csv"))
            {
                snackbar.Add("File extention is not CSV", Severity.Warning);
                return;
            }

            var stopwatch = new Stopwatch();
            stopwatch.Start();

            var candles = await CandlesService.ParseCandlesByType(candleType, candlesFile);
            await CandlesService.BulkWriteCandles(instrumentId, candleType, candles);
            stopwatch.Stop();

            snackbar.Add(
                $"Instrument {instrumentId} was recorded, time elapsed: {stopwatch.Elapsed}",
                Severity.Success);
        }
        catch (Exception e)
        {
            snackbar.Add(e.Message, Severity.Error);
        }
    }

    private async Task RefreshCache()
    {
        if (string.IsNullOrEmpty(instrumentId))
        {
            snackbar.Add("Instrument must be not empty", Severity.Warning);
            return;
        }

        var grpcResult = await CandlesHistoryGrpc.ReloadInstrumentAsync(
            new ReloadInstrumentContract
                {
                    InstrumentId = instrumentId,
                    IsAsk = !isBid
                });

        if (grpcResult.Result)
        {
             snackbar.Add("Cache was updated", Severity.Success);
        }
        else
        {
            snackbar.Add("Can't run update because cache renewal is already in progress", Severity.Warning);
        }
    }
}
