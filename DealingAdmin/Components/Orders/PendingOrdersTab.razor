@using System.ComponentModel
@using AntDesign.TableModels
@using AntDesign
@using DealingAdmin.Abstractions
@using DealingAdmin.Abstractions.Models
@using DealingAdmin.Abstractions.Providers.Interfaces
@using DealingAdmin.Services
@using DealingAdmin.Shared.Services
@using SimpleTrading.Abstraction.Trading.Instruments
@using SimpleTrading.Abstraction.Trading.Settings

@inject StateManager AppState
@inject LiveDemoServiceMapper LiveDemoServices
@inject IAccountTypeFilter AccTypeFilter
@inject ICache<ITradingInstrument> InstrumentsCache
@inject ISnackbar snackbar

<div id="PendingOrdersRegion">    
    <div class="mb-2">
        <AntDesign.Row>
            <Col Span="4" Class="text-nowrap">
                <span class="text-bold mx-2">Accounts:</span>
                <Select Mode="default"
                        Value="AccountsTypeFilter"
                        TItemValue="AccountType"
                        TItem="AccountType"
                        OnSelectedItemChanged="AccountsTypeFilterChanged">
                    <SelectOptions>
                        @foreach (var item in Enum.GetValues<AccountType>())
                        {
                            <SelectOption
                                TItemValue="AccountType"
                                TItem="AccountType"
                                Value=@item
                                Label="@item.ToString()"/>
                        }
                    </SelectOptions>
                </Select>
            </Col>
        </AntDesign.Row>       
    </div>
    <Table DataSource="@GridData"
           TItem="PendingOrderViewModel"
           Loading="@isLoading"
           Bordered="@true"
           Total="_total"
           ScrollY="calc(100vh - 260px)"
           @bind-PageIndex="_pageIndex"
           @bind-PageSize="_pageSize">
        <AntDesign.Column Ellipsis
                TData="long"
                Title="Id"
                @bind-Field="@context.Id"
                Width="100"
                Sortable
                Filterable>
        </AntDesign.Column>
        <AntDesign.Column Title="Account"
                TData="string"
                @bind-Field="@context.AccountId"
                Width="140"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Open Date"
                TData="DateTime"
                @bind-Field="@context.Created"
                Format="yyyy-MM-dd"
                Sortable>
            <div style="font-family: Nunito Sans,-apple-system,BlinkMacSystemFont,Helvetica Neue,sans-serif;">
                <div><Icon Type="plus-circle" Theme="outline"  /> @FormatUtils.DateTimeNamedWithMsFormat(context.Created)</div>
            </div>
        </AntDesign.Column>
        <AntDesign.Column Title="Price"
                @bind-Field="@context.Id"
                Width="280">
                <PendingOrderPrice Order="context" Digits="context.InstrumentDigits"></PendingOrderPrice>
        </AntDesign.Column>
        <AntDesign.Column Title="Now BidAsk"
                @bind-Field="@context.Id">
            <OrderNowBidAsk BidAsk="@(new BidAskModel { Id = context.Instrument })" Digits="context.InstrumentDigits"></OrderNowBidAsk>
        </AntDesign.Column>
        <AntDesign.Column Title="Operation"
                @bind-Field="@context.Operation"
                Width="100">
                <OrderOperation Operation="context.Operation" OrderType="context.OpenOrderType"></OrderOperation>
        </AntDesign.Column>
        <AntDesign.Column Title="Instrument"
                TData="string"
                @bind-Field="@context.Instrument"
                Sortable
                Filterable/>
        <AntDesign.Column Title="Investment"
                TData="double"
                @bind-Field="@context.InvestmentAmount"
                Sortable>
            <div>@($"{context.InvestmentAmount.ToString("F0")} x 1:{context.Leverage }")</div>
            <div>@($"V: {(context.InvestmentAmount * context.Leverage).ToString("F0")}")</div>
        </AntDesign.Column>
        <AntDesign.Column Title="Take Profit"
                TData="double?"
                @bind-Field="@context.TakeProfitInCurrency">
            <div>@($"{GetOrderTakeProfit(context)}")</div>
        </AntDesign.Column>
        <AntDesign.Column Title="Stop Loss"
                TData="double?"
                @bind-Field="@context.StopLossInCurrency">
            <div>@($"{GetOrderStopLoss(context)}")</div>
        </AntDesign.Column>
        <AntDesign.Column Title="Refill %"
                TData="double"
                @bind-Field="@context.ToppingUpPercent"
                Sortable>
            <div>@((context.ToppingUpPercent > 0 ? $"{context.ToppingUpPercent.ToString("F0")}%" : "-"))</div>
        </AntDesign.Column>
    </Table>
</div>

<style>
.ant-table td {
    padding: 5px 10px !important
}
</style>

@code
{
    public List<PendingOrderViewModel> GridData
        = new List<PendingOrderViewModel>();

    private AccountType AccountsTypeFilter = AccountType.Real;

    int _pageIndex = 1;
    int _pageSize = 200;
    int _total = 0;

    private bool isLoading { get; set; } = true;

    private bool stopPriceRefresh { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        await RefreshData();
        AppState.LiveDemoModeChanged += async () => await InvokeAsync(() => RefreshData());
        await base.OnInitializedAsync();
    }

    private async void AccountsTypeFilterChanged(AccountType selectedAccType)
    {
        AccountsTypeFilter = selectedAccType;
        await RefreshData();
    }

    private async Task RefreshData()
    {
        if (isLoading)
        {
            snackbar.Add($"Data refresh for Pending Orders in progress");
            return;
        }

        isLoading = true;

        try
        {
            var pendingOrders = (await LiveDemoServices.GetContext(AppState.IsLive).StReader.GetPendingOrdersAsync());

            GridData =  (await AccTypeFilter.FilterPositions(pendingOrders, AccountsTypeFilter))
                .Select(x => PendingOrderViewModel.Create(x,
                    InstrumentsCache.Get(x.Instrument)?.Digits ?? 2)).ToList();
        }
        finally
        {
             isLoading = false;
        }
        isLoading = false;

        this.StateHasChanged();
    }

    private string GetOrderTakeProfit(PendingOrderViewModel order)
    {
        if (order.TakeProfitInCurrency.HasValue) {
            return order.TakeProfitInCurrency.Value.ToString("F2");
        }

        if (order.TakeProfitRate.HasValue) {
            return $"rate: ${order.TakeProfitRate.Value.ToString("F2")}";
        }

        return "-";
    }

    private string GetOrderStopLoss(PendingOrderViewModel order)
    {
        if (order.StopLossInCurrency.HasValue) {
            return order.StopLossInCurrency.Value.ToString("F2");
        }

        if (order.StopLossRate.HasValue) {
             return $"rate: ${order.StopLossRate.Value.ToString("F2")}";
        }

        return "-";
    }
}